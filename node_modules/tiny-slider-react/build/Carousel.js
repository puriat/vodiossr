"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _tinySlider = require("ventura-slider/src/tiny-slider.module");

require("ventura-slider/dist/tiny-slider.css");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Wrapper component to show carousel, controlling the lifecycle
 * methods and settings update.
 * @param {object} settings - setting to configure tiny-slider plugin
 * @param {function} onClick - callback to return slide clicked
 * @param {number} startIndex - index of carousel initiation
 *
 * @param {function} onIndexChanged - event bind
 * @param {function} onTransitionStart - event bind
 * @param {function} onTransitionEnd - event bind
 * @param {function} onTouchStart - event bind
 * @param {function} onTouchMove - event bind
 * @param {function} onTouchEnd - event bind
 *
 * @returns {ReactElement}
 */
var Carousel = function (_Component) {
  _inherits(Carousel, _Component);

  function Carousel(props) {
    _classCallCheck(this, Carousel);

    var _this = _possibleConstructorReturn(this, (Carousel.__proto__ || Object.getPrototypeOf(Carousel)).call(this, props));

    _this.state = {
      defaultSettings: {
        responsive: {},
        controlsText: ['◀', '▶']
      }
    };

    _this.slider = null;
    _this.build = _this.build.bind(_this);
    _this.onClick = _this.onClick.bind(_this);
    _this.dragging = false;
    _this.mergedSettings = 0;
    _this.count = 0;
    return _this;
  }

  /**
   * Fire click on carousel when no draggin and call the onClick callback on prop
   */


  _createClass(Carousel, [{
    key: "onClick",
    value: function onClick(event) {
      var onClick = this.props.onClick;

      if (this.dragging || !onClick) return;

      // when only one element the slider doesnt init
      if (!this.slider) return onClick(null, null, event);

      var info = this.slider.getInfo();
      var slideClicked = info.slideItems[info.index];

      // call click callback wiht info and slide clicked
      onClick(slideClicked, info, event);
    }

    /** * Initialize the carousel plugin with new settings */

  }, {
    key: "build",
    value: function build() {
      var _this2 = this;

      var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (this.slider) this.slider.destroy();

      /* INIT CAROUSEL */
      this.mergedSettings = _extends({}, this.state.defaultSettings, settings, {
        container: this.ref,
        onInit: function onInit() {
          _this2.postInit();
        }
      });

      this.slider = (0, _tinySlider.tns)(this.mergedSettings);

      // call events binding 
      if (this.slider) return;

      // if the slider doesn't load because there is just a child
      // so add class to normal behavior
      this.ref.className += ' tns-item';

      // so if there is lazy load active load src manually
      if (this.mergedSettings.lazyload) {
        [].forEach.call(this.ref.querySelectorAll('img'), function (img) {
          if (img.dataset.src) {
            img.src = img.dataset.src;
            img.className += ' loaded';
          }
        });
      }
    }

    /**
     * Once the slider plugins has been initialized 
    */

  }, {
    key: "postInit",
    value: function postInit() {
      var _this3 = this;

      if (!this.slider) {
        if (this.count >= 4) {
          return this.props.onInit(false); // call initMetod anyway
        }
        this.count++;
        return setTimeout(this.postInit.bind(this), 100);
      }
      this.count = 0;

      var _slider = this.slider,
          events = _slider.events,
          goTo = _slider.goTo;
      var _props = this.props,
          onIndexChanged = _props.onIndexChanged,
          onTransitionStart = _props.onTransitionStart,
          onTransitionEnd = _props.onTransitionEnd,
          onTouchStart = _props.onTouchStart,
          onTouchMove = _props.onTouchMove,
          onTouchEnd = _props.onTouchEnd,
          startIndex = _props.startIndex,
          onInit = _props.onInit;

      /* BIND EVENTS */

      // change draggin value to purge onClick event.

      events.on('transitionStart', function (info) {
        _this3.dragging = true;
        if (onTransitionStart) onTransitionStart(info);
      });

      events.on('transitionEnd', function (info) {
        _this3.dragging = false;
        if (onTransitionEnd) onTransitionEnd(info);
      });

      if (onIndexChanged) events.on('indexChanged', onIndexChanged);
      if (onTouchStart) events.on('touchStart', onTouchStart);
      if (onTouchMove) events.on('touchMove', onTouchMove);
      if (onTouchEnd) events.on('touchEnd', onTouchEnd);

      /* GO TO START SLIDE */
      if (startIndex) {
        goTo(startIndex);
      }

      // call on Innit
      onInit(true);
    }

    /* LIFECYCLE EVENTS */

  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.build(this.props.settings);
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (!(0, _utils.ObjectsEqual)(nextProps.settings, this.props.settings) || !(0, _utils.ChildrenEqual)(nextProps.children, this.props.children)) {
        // prepare to reinitialization
        if (this.slider) {
          this.slider.destroy();
          this.slider = null;
        }
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      if (!this.slider) {
        // rebuild in case to doesn exists
        this.build(this.props.settings);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.slider) this.slider.destroy();
    }
  }, {
    key: "render",
    value: function render() {
      var _this4 = this;

      var _props2 = this.props,
          settings = _props2.settings,
          children = _props2.children,
          props = _objectWithoutProperties(_props2, ["settings", "children"]);

      return _react2.default.createElement(
        "div",
        { ref: function ref(ele) {
            return _this4.ref = ele;
          }, onClick: this.onClick },
        children
      );
    }
  }]);

  return Carousel;
}(_react.Component);

Carousel.propTypes = {
  settings: _propTypes2.default.object,
  onClick: _propTypes2.default.func,
  startIndex: _propTypes2.default.number,
  // custom tiny events events
  onIndexChanged: _propTypes2.default.func,
  onTransitionStart: _propTypes2.default.func,
  onTransitionEnd: _propTypes2.default.func,
  onTouchStart: _propTypes2.default.func,
  onTouchMove: _propTypes2.default.func,
  onTouchEnd: _propTypes2.default.func,
  // events
  onInit: _propTypes2.default.func
};

Carousel.defaultProps = {
  onInit: function onInit() {}
};

exports.default = Carousel;